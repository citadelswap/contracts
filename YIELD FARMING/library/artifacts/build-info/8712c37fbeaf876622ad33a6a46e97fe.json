{
	"id": "8712c37fbeaf876622ad33a6a46e97fe",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.6.12",
	"solcLongVersion": "0.6.12+commit.27d51765",
	"input": {
		"language": "Solidity",
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		},
		"sources": {
			"FARMING/library/WhitelistUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.6.12;\r\n\r\nimport \"../access/OwnableUpgradeable.sol\";\r\n\r\ncontract WhitelistUpgradeable is OwnableUpgradeable {\r\n    mapping (address => bool) private _whitelist;\r\n    bool private _disable;                      // default - false means whitelist feature is working on. if true no more use of whitelist\r\n\r\n    event Whitelisted(address indexed _address, bool whitelist);\r\n    event EnableWhitelist();\r\n    event DisableWhitelist();\r\n\r\n    modifier onlyWhitelisted {\r\n        require(_disable || _whitelist[msg.sender], \"Whitelist: caller is not on the whitelist\");\r\n        _;\r\n    }\r\n\r\n    function __WhitelistUpgradeable_init() internal initializer {\r\n        __Ownable_init();\r\n    }\r\n\r\n    function isWhitelist(address _address) public view returns(bool) {\r\n        return _whitelist[_address];\r\n    }\r\n\r\n    function setWhitelist(address _address, bool _on) external onlyOwner {\r\n        _whitelist[_address] = _on;\r\n\r\n        emit Whitelisted(_address, _on);\r\n    }\r\n\r\n    function disableWhitelist(bool disable) external onlyOwner {\r\n        _disable = disable;\r\n        if (disable) {\r\n            emit DisableWhitelist();\r\n        } else {\r\n            emit EnableWhitelist();\r\n        }\r\n    }\r\n\r\n    uint256[49] private __gap;\r\n}"
			},
			"FARMING/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/Initializable.sol\";\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}"
			},
			"FARMING/proxy/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\n// solhint-disable-next-line compiler-version\r\npragma solidity >=0.4.24 <0.8.0;\r\n\r\nimport \"../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || _isConstructor() || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n\r\n    /// @dev Returns true if and only if the function is running in the constructor\r\n    function _isConstructor() private view returns (bool) {\r\n        return !AddressUpgradeable.isContract(address(this));\r\n    }\r\n}"
			},
			"FARMING/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.0 <0.8.0;\r\nimport \"../proxy/Initializable.sol\";\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with GSN meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}"
			},
			"FARMING/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity >=0.6.12;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}"
			}
		}
	},
	"output": {
		"contracts": {
			"FARMING/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"FARMING/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"FARMING/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35db8908994222c1532d8f6f5728a4c554d5a18a86b88c20326b15c71f15b344\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce847036ca35fdaa38ac8db4b977e5d6055a7a0e4a89c1303eafa0917c4cdcd8\",\"dweb:/ipfs/QmbgbGxJQPS9EVCJBimSAqrx7HRnVyHJDNbBUDtDLc794E\"]},\"FARMING/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"FARMING/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"FARMING/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 241,
								"contract": "FARMING/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 244,
								"contract": "FARMING/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 588,
								"contract": "FARMING/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "FARMING/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 129,
								"contract": "FARMING/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"FARMING/library/WhitelistUpgradeable.sol": {
				"WhitelistUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [],
							"name": "DisableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [],
							"name": "EnableWhitelist",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "whitelist",
									"type": "bool"
								}
							],
							"name": "Whitelisted",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "disable",
									"type": "bool"
								}
							],
							"name": "disableWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								}
							],
							"name": "isWhitelist",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_address",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "_on",
									"type": "bool"
								}
							],
							"name": "setWhitelist",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"FARMING/library/WhitelistUpgradeable.sol\":108:1290  contract WhitelistUpgradeable is OwnableUpgradeable {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":108:1290  contract WhitelistUpgradeable is OwnableUpgradeable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x49ba1b49\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x53d6fd59\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xc683630d\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_3:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_10\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      pop\n      calldataload\n      iszero\n      iszero\n      tag_11\n      jump\t// in\n    tag_9:\n      stop\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_4:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x40\n      dup2\n      lt\n      iszero\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_13:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n      dup2\n      calldataload\n      and\n      swap1\n      0x20\n      add\n      calldataload\n      iszero\n      iszero\n      tag_14\n      jump\t// in\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_5:\n      tag_9\n      tag_16\n      jump\t// in\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_6:\n      tag_17\n      tag_18\n      jump\t// in\n    tag_17:\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      swap3\n      and\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_7:\n      tag_19\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_20\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_20:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_21\n      jump\t// in\n    tag_19:\n      0x40\n      dup1\n      mload\n      swap2\n      iszero\n      iszero\n      dup3\n      mstore\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x20\n      add\n      swap1\n      return\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_8:\n      tag_9\n      0x04\n      dup1\n      calldatasize\n      sub\n      0x20\n      dup2\n      lt\n      iszero\n      tag_23\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_23:\n      pop\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      tag_24\n      jump\t// in\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n    tag_11:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_26\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_26:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_28\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_28:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n      eq\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_29\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_29:\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1099:1107  _disable */\n      0x66\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1099:1117  _disable = disable */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup3\n      iszero\n      dup1\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      tag_31\n      jumpi\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1161:1179  DisableWhitelist() */\n      mload(0x40)\n      0x508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc53\n      swap1\n      0x00\n      swap1\n      log1\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n      jump(tag_32)\n    tag_31:\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1217:1234  EnableWhitelist() */\n      mload(0x40)\n      0xa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae0\n      swap1\n      0x00\n      swap1\n      log1\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1128:1246  if (disable) {\r... */\n    tag_32:\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":1029:1253  function disableWhitelist(bool disable) external onlyOwner {\r... */\n      pop\n      jump\t// out\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n    tag_14:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_34\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_34:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_35\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_35:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n      eq\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_36\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_36:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":943:953  _whitelist */\n      0x65\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":943:963  _whitelist[_address] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":943:969  _whitelist[_address] = _on */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup6\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":987:1013  Whitelisted(_address, _on) */\n      dup3\n      mload\n      swap1\n      dup2\n      mstore\n      swap2\n      mload\n      0xa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f26440\n      swap3\n      dup2\n      swap1\n      sub\n      swap1\n      swap2\n      add\n      swap1\n      log2\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":863:1021  function setWhitelist(address _address, bool _on) external onlyOwner {\r... */\n      pop\n      pop\n      jump\t// out\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n    tag_16:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_39\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_39:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_40\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_40:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n      eq\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_41\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_41:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2111:2117  _owner */\n      sload(0x33)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      mload(0x40)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2127:2128  0 */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2111:2117  _owner */\n      and\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2127:2128  0 */\n      dup4\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2090:2130  OwnershipTransferred(_owner, address(0)) */\n      log3\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2141:2147  _owner */\n      0x33\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2141:2160  _owner = address(0) */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      swap1\n      sstore\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2020:2168  function renounceOwnership() public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n    tag_18:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1442:1448  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1369:1456  function owner() public view virtual returns (address) {\r... */\n      swap1\n      jump\t// out\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n    tag_21:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      and\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":803:807  bool */\n      0x00\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      swap1\n      dup2\n      mstore\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":827:837  _whitelist */\n      0x65\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":827:847  _whitelist[_address] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"FARMING/library/WhitelistUpgradeable.sol\":744:855  function isWhitelist(address _address) public view returns(bool) {\r... */\n      jump\t// out\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n    tag_24:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      tag_46\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1610  _msgSender */\n      tag_27\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1600:1612  _msgSender() */\n      jump\t// in\n    tag_46:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      tag_47\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1594  owner */\n      tag_18\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1596  owner() */\n      jump\t// in\n    tag_47:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1589:1612  owner() == _msgSender() */\n      and\n      eq\n        /* \"FARMING/access/OwnableUpgradeable.sol\":1581:1649  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_48\n      jumpi\n      0x40\n      dup1\n      mload\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x20\n      0x04\n      dup3\n      add\n      dup2\n      swap1\n      mstore\n      0x24\n      dup3\n      add\n      mstore\n      0x00\n      dup1\n      mload\n      0x20\n      data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe\n      dup4\n      codecopy\n      dup2\n      mload\n      swap2\n      mstore\n      0x44\n      dup3\n      add\n      mstore\n      swap1\n      mload\n      swap1\n      dup2\n      swap1\n      sub\n      0x64\n      add\n      swap1\n      revert\n    tag_48:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2412:2434  newOwner != address(0) */\n      dup2\n      and\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2404:2477  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_50\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      dup1\n      dup1\n      0x20\n      add\n      dup3\n      dup2\n      sub\n      dup3\n      mstore\n      0x26\n      dup2\n      mstore\n      0x20\n      add\n      dup1\n      data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe\n      0x26\n      swap2\n      codecopy\n      0x40\n      add\n      swap2\n      pop\n      pop\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_50:\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2514:2520  _owner */\n      sload(0x33)\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup5\n      and\n      swap3\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2514:2520  _owner */\n      and\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2514:2520  _owner */\n      0x00\n      swap1\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2493:2531  OwnershipTransferred(_owner, newOwner) */\n      log3\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2542:2548  _owner */\n      0x33\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2542:2559  _owner = newOwner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"FARMING/access/OwnableUpgradeable.sol\":2323:2567  function transferOwnership(address newOwner) public virtual onlyOwner {\r... */\n      jump\t// out\n        /* \"FARMING/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n    tag_27:\n        /* \"FARMING/utils/ContextUpgradeable.sol\":938:948  msg.sender */\n      caller\n        /* \"FARMING/utils/ContextUpgradeable.sol\":850:956  function _msgSender() internal view virtual returns (address payable) {\r... */\n      swap1\n      jump\t// out\n    stop\n    data_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe 4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373\n    data_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe 4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n\n    auxdata: 0xa2646970667358221220d2179b2b4d73ca1a8f5011f4c982c76fc885d5a1124d7b461bf664035749667564736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610534806100206000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806349ba1b491461006757806353d6fd5914610088578063715018a6146100b65780638da5cb5b146100be578063c683630d146100e2578063f2fde38b1461011c575b600080fd5b6100866004803603602081101561007d57600080fd5b50351515610142565b005b6100866004803603604081101561009e57600080fd5b506001600160a01b0381351690602001351515610216565b6100866102d8565b6100c6610384565b604080516001600160a01b039092168252519081900360200190f35b610108600480360360208110156100f857600080fd5b50356001600160a01b0316610393565b604080519115158252519081900360200190f35b6100866004803603602081101561013257600080fd5b50356001600160a01b03166103b1565b61014a6104b4565b6001600160a01b031661015b610384565b6001600160a01b0316146101a4576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6066805460ff191682158015919091179091556101e9576040517f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5390600090a1610213565b6040517fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae090600090a15b50565b61021e6104b4565b6001600160a01b031661022f610384565b6001600160a01b031614610278576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6001600160a01b038216600081815260656020908152604091829020805460ff1916851515908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b6102e06104b4565b6001600160a01b03166102f1610384565b6001600160a01b03161461033a576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6001600160a01b031660009081526065602052604090205460ff1690565b6103b96104b4565b6001600160a01b03166103ca610384565b6001600160a01b031614610413576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6001600160a01b0381166104585760405162461bcd60e51b81526004018080602001828103825260268152602001806104b96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d2179b2b4d73ca1a8f5011f4c982c76fc885d5a1124d7b461bf664035749667564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x534 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x142 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x216 JUMP JUMPDEST PUSH2 0x86 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x384 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15B PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO DUP1 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x1E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x21E PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x22F PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x278 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE SWAP2 MLOAD PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F1 PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x33A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3B9 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3CA PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x413 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A2063616C6C657220 PUSH10 0x73206E6F742074686520 PUSH16 0x776E6572A2646970667358221220D217 SWAP12 0x2B 0x4D PUSH20 0xCA1A8F5011F4C982C76FC885D5A1124D7B461BF6 PUSH5 0x357496675 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "108:1182:1:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100625760003560e01c806349ba1b491461006757806353d6fd5914610088578063715018a6146100b65780638da5cb5b146100be578063c683630d146100e2578063f2fde38b1461011c575b600080fd5b6100866004803603602081101561007d57600080fd5b50351515610142565b005b6100866004803603604081101561009e57600080fd5b506001600160a01b0381351690602001351515610216565b6100866102d8565b6100c6610384565b604080516001600160a01b039092168252519081900360200190f35b610108600480360360208110156100f857600080fd5b50356001600160a01b0316610393565b604080519115158252519081900360200190f35b6100866004803603602081101561013257600080fd5b50356001600160a01b03166103b1565b61014a6104b4565b6001600160a01b031661015b610384565b6001600160a01b0316146101a4576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6066805460ff191682158015919091179091556101e9576040517f508560e15717a4e9058b9a19d806cb679004a1bd953376f71fda71c141e5dc5390600090a1610213565b6040517fa2927d972f7cfc5ff8b7ad79f9adf0bdb885d0e569f40d0037df2e1299616ae090600090a15b50565b61021e6104b4565b6001600160a01b031661022f610384565b6001600160a01b031614610278576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6001600160a01b038216600081815260656020908152604091829020805460ff1916851515908117909155825190815291517fa54714518c5d275fdcd3d2a461e4858e4e8cb04fb93cd0bca9d6d34115f264409281900390910190a25050565b6102e06104b4565b6001600160a01b03166102f1610384565b6001600160a01b03161461033a576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6033546001600160a01b031690565b6001600160a01b031660009081526065602052604090205460ff1690565b6103b96104b4565b6001600160a01b03166103ca610384565b6001600160a01b031614610413576040805162461bcd60e51b815260206004820181905260248201526000805160206104df833981519152604482015290519081900360640190fd5b6001600160a01b0381166104585760405162461bcd60e51b81526004018080602001828103825260268152602001806104b96026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b339056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572a2646970667358221220d2179b2b4d73ca1a8f5011f4c982c76fc885d5a1124d7b461bf664035749667564736f6c634300060c0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x62 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x49BA1B49 EQ PUSH2 0x67 JUMPI DUP1 PUSH4 0x53D6FD59 EQ PUSH2 0x88 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xB6 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0xC683630D EQ PUSH2 0xE2 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x11C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD ISZERO ISZERO PUSH2 0x142 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 0x20 ADD CALLDATALOAD ISZERO ISZERO PUSH2 0x216 JUMP JUMPDEST PUSH2 0x86 PUSH2 0x2D8 JUMP JUMPDEST PUSH2 0xC6 PUSH2 0x384 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x108 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x393 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH2 0x86 PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x132 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B1 JUMP JUMPDEST PUSH2 0x14A PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x15B PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x1A4 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x66 DUP1 SLOAD PUSH1 0xFF NOT AND DUP3 ISZERO DUP1 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH2 0x1E9 JUMPI PUSH1 0x40 MLOAD PUSH32 0x508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53 SWAP1 PUSH1 0x0 SWAP1 LOG1 PUSH2 0x213 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xA2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH2 0x21E PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x22F PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x278 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE SWAP2 MLOAD PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0x2E0 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2F1 PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x33A JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x65 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x3B9 PUSH2 0x4B4 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3CA PUSH2 0x384 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x413 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x4DF DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 0x44 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x64 ADD SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x458 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD DUP1 DUP1 PUSH1 0x20 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 0x26 DUP2 MSTORE PUSH1 0x20 ADD DUP1 PUSH2 0x4B9 PUSH1 0x26 SWAP2 CODECOPY PUSH1 0x40 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER SWAP1 JUMP INVALID 0x4F PUSH24 0x6E61626C653A206E6577206F776E65722069732074686520 PUSH27 0x65726F20616464726573734F776E61626C653A2063616C6C657220 PUSH10 0x73206E6F742074686520 PUSH16 0x776E6572A2646970667358221220D217 SWAP12 0x2B 0x4D PUSH20 0xCA1A8F5011F4C982C76FC885D5A1124D7B461BF6 PUSH5 0x357496675 PUSH5 0x736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "108:1182:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1029:224;;;;;;;;;;;;;;;;-1:-1:-1;1029:224:1;;;;:::i;:::-;;863:158;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;863:158:1;;;;;;;;;;:::i;2020:148:0:-;;;:::i;1369:87::-;;;:::i;:::-;;;;-1:-1:-1;;;;;1369:87:0;;;;;;;;;;;;;;744:111:1;;;;;;;;;;;;;;;;-1:-1:-1;744:111:1;-1:-1:-1;;;;;744:111:1;;:::i;:::-;;;;;;;;;;;;;;;;;;2323:244:0;;;;;;;;;;;;;;;;-1:-1:-1;2323:244:0;-1:-1:-1;;;;;2323:244:0;;:::i;1029:224:1:-;1600:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1589:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1589:23:0;;1581:68;;;;;-1:-1:-1;;;1581:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1581:68:0;;;;;;;;;;;;;;;1099:8:1::1;:18:::0;;-1:-1:-1;;1099:18:1::1;::::0;::::1;::::0;::::1;::::0;;;::::1;::::0;;;1128:118:::1;;1161:18;::::0;::::1;::::0;;;::::1;1128:118;;;1217:17;::::0;::::1;::::0;;;::::1;1128:118;1029:224:::0;:::o;863:158::-;1600:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1589:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1589:23:0;;1581:68;;;;;-1:-1:-1;;;1581:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1581:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;943:20:1;::::1;;::::0;;;:10:::1;:20;::::0;;;;;;;;:26;;-1:-1:-1;;943:26:1::1;::::0;::::1;;::::0;;::::1;::::0;;;987;;;;;;;::::1;::::0;;;;;;;;::::1;863:158:::0;;:::o;2020:148:0:-;1600:12;:10;:12::i;:::-;-1:-1:-1;;;;;1589:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1589:23:0;;1581:68;;;;;-1:-1:-1;;;1581:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1581:68:0;;;;;;;;;;;;;;;2111:6:::1;::::0;2090:40:::1;::::0;2127:1:::1;::::0;-1:-1:-1;;;;;2111:6:0::1;::::0;2090:40:::1;::::0;2127:1;;2090:40:::1;2141:6;:19:::0;;-1:-1:-1;;;;;;2141:19:0::1;::::0;;2020:148::o;1369:87::-;1442:6;;-1:-1:-1;;;;;1442:6:0;1369:87;:::o;744:111:1:-;-1:-1:-1;;;;;827:20:1;803:4;827:20;;;:10;:20;;;;;;;;;744:111::o;2323:244:0:-;1600:12;:10;:12::i;:::-;-1:-1:-1;;;;;1589:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1589:23:0;;1581:68;;;;;-1:-1:-1;;;1581:68:0;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;1581:68:0;;;;;;;;;;;;;;;-1:-1:-1;;;;;2412:22:0;::::1;2404:73;;;;-1:-1:-1::0;;;2404:73:0::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2514:6;::::0;2493:38:::1;::::0;-1:-1:-1;;;;;2493:38:0;;::::1;::::0;2514:6:::1;::::0;2493:38:::1;::::0;2514:6:::1;::::0;2493:38:::1;2542:6;:17:::0;;-1:-1:-1;;;;;;2542:17:0::1;-1:-1:-1::0;;;;;2542:17:0;;;::::1;::::0;;;::::1;::::0;;2323:244::o;850:106:4:-;938:10;850:106;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "266400",
								"executionCost": "306",
								"totalCost": "266706"
							},
							"external": {
								"disableWhitelist(bool)": "infinite",
								"isWhitelist(address)": "1220",
								"owner()": "1081",
								"renounceOwnership()": "infinite",
								"setWhitelist(address,bool)": "infinite",
								"transferOwnership(address)": "infinite"
							},
							"internal": {
								"__WhitelistUpgradeable_init()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 1,
									"value": "80"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "CALLVALUE",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "tag",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH #[$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH [$]",
									"source": 1,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "CODECOPY",
									"source": 1
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 108,
									"end": 1290,
									"name": "RETURN",
									"source": 1
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d2179b2b4d73ca1a8f5011f4c982c76fc885d5a1124d7b461bf664035749667564736f6c634300060c0033",
									".code": [
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLVALUE",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "tag",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "E0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "SHR",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "49BA1B49"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "53D6FD59"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "715018A6"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "5"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "8DA5CB5B"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "C683630D"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "F2FDE38B"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "tag",
											"source": 1,
											"value": "2"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 108,
											"end": 1290,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 1,
											"value": "3"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "STOP",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "9"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 1,
											"value": "19"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "RETURN",
											"source": 1
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1107,
											"name": "PUSH",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1099,
											"end": 1117,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 1,
											"value": "508560E15717A4E9058B9A19D806CB679004A1BD953376F71FDA71C141E5DC53"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1161,
											"end": 1179,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 1,
											"value": "31"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 1,
											"value": "A2927D972F7CFC5FF8B7AD79F9ADF0BDB885D0E569F40D0037DF2E1299616AE0"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1217,
											"end": 1234,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "tag",
											"source": 1,
											"value": "32"
										},
										{
											"begin": 1128,
											"end": 1246,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1253,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "tag",
											"source": 1,
											"value": "14"
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "34"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 943,
											"end": 953,
											"name": "PUSH",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 943,
											"end": 963,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 943,
											"end": 963,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 943,
											"end": 969,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "PUSH",
											"source": 1,
											"value": "A54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440"
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 987,
											"end": 1013,
											"name": "LOG2",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 863,
											"end": 1021,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2111,
											"end": 2117,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2127,
											"end": 2128,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2090,
											"end": 2130,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2147,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2141,
											"end": 2160,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2020,
											"end": 2168,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1442,
											"end": 1448,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1369,
											"end": 1456,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "tag",
											"source": 1,
											"value": "21"
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 803,
											"end": 807,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 827,
											"end": 837,
											"name": "PUSH",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "KECCAK256",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 827,
											"end": 847,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 827,
											"end": 847,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 744,
											"end": 855,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1600,
											"end": 1610,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 1600,
											"end": 1612,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1589,
											"end": 1594,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "tag",
											"source": 0,
											"value": "47"
										},
										{
											"begin": 1589,
											"end": 1596,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1589,
											"end": 1612,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH data",
											"source": -1,
											"value": "9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP4",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "CODECOPY",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "PUSH",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 1581,
											"end": 1649,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2412,
											"end": 2434,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH data",
											"source": 0,
											"value": "245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "CODECOPY",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "tag",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2404,
											"end": 2477,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2514,
											"end": 2520,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2493,
											"end": 2531,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2548,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2542,
											"end": 2559,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2323,
											"end": 2567,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "tag",
											"source": 4,
											"value": "27"
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 938,
											"end": 948,
											"name": "CALLER",
											"source": 4
										},
										{
											"begin": 850,
											"end": 956,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 850,
											"end": 956,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										}
									],
									".data": {
										"245F15FF17F551913A7A18385165551503906A406F905AC1C2437281A7CD0CFE": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
										"9924EBDF1ADD33D25D4EF888E16131F0A5687B0580A36C21B5C301A6C462EFFE": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572"
									}
								}
							}
						},
						"methodIdentifiers": {
							"disableWhitelist(bool)": "49ba1b49",
							"isWhitelist(address)": "c683630d",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"setWhitelist(address,bool)": "53d6fd59",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[],\"name\":\"DisableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EnableWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"whitelist\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"disable\",\"type\":\"bool\"}],\"name\":\"disableWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_on\",\"type\":\"bool\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"FARMING/library/WhitelistUpgradeable.sol\":\"WhitelistUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"FARMING/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0x35db8908994222c1532d8f6f5728a4c554d5a18a86b88c20326b15c71f15b344\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ce847036ca35fdaa38ac8db4b977e5d6055a7a0e4a89c1303eafa0917c4cdcd8\",\"dweb:/ipfs/QmbgbGxJQPS9EVCJBimSAqrx7HRnVyHJDNbBUDtDLc794E\"]},\"FARMING/library/WhitelistUpgradeable.sol\":{\"keccak256\":\"0xe76cd48d6f9299378aab69c6550df2e83b014bfb26552e1480e7eec577da995e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://79d6b23fc270819f333aa2135eb4399a88ebcd951cb744e0fb55226c31846f01\",\"dweb:/ipfs/Qma1GDgtiCLeegNQ2oYXfM9ErJpVw59CiA1J32nmHB4o9G\"]},\"FARMING/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"FARMING/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"FARMING/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 241,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 244,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 588,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 129,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 139,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_whitelist",
								"offset": 0,
								"slot": "101",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 141,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "_disable",
								"offset": 0,
								"slot": "102",
								"type": "t_bool"
							},
							{
								"astId": 233,
								"contract": "FARMING/library/WhitelistUpgradeable.sol:WhitelistUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "103",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"FARMING/proxy/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"FARMING/proxy/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"FARMING/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"FARMING/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 241,
								"contract": "FARMING/proxy/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 244,
								"contract": "FARMING/proxy/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"FARMING/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"FARMING/utils/AddressUpgradeable.sol\":135:7007  library AddressUpgradeable {\r... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  invalid\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"FARMING/utils/AddressUpgradeable.sol\":135:7007  library AddressUpgradeable {\r... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212208cf2480cc4a27e161e9b1b43acb5c107fb0ae3a61705b242dd2cc8c2651d9f6464736f6c634300060c0033\n}\n",
						"bytecode": {
							"linkReferences": {},
							"object": "60566023600b82828239805160001a607314601657fe5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208cf2480cc4a27e161e9b1b43acb5c107fb0ae3a61705b242dd2cc8c2651d9f6464736f6c634300060c0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x23 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x16 JUMPI INVALID JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 CALLCODE 0x48 0xC 0xC4 LOG2 PUSH31 0x161E9B1B43ACB5C107FB0AE3A61705B242DD2CC8C2651D9F6464736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "135:6872:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208cf2480cc4a27e161e9b1b43acb5c107fb0ae3a61705b242dd2cc8c2651d9f6464736f6c634300060c0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP13 CALLCODE 0x48 0xC 0xC4 LOG2 PUSH31 0x161E9B1B43ACB5C107FB0AE3A61705B242DD2CC8C2651D9F6464736F6C6343 STOP MOD 0xC STOP CALLER ",
							"sourceMap": "135:6872:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "97",
								"totalCost": "17297"
							},
							"internal": {
								"_verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "INVALID",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 135,
									"end": 7007,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212208cf2480cc4a27e161e9b1b43acb5c107fb0ae3a61705b242dd2cc8c2651d9f6464736f6c634300060c0033",
									".code": [
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 135,
											"end": 7007,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"FARMING/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"FARMING/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"FARMING/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.6.12+commit.27d51765\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"FARMING/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"FARMING/proxy/Initializable.sol\":{\"keccak256\":\"0x36379d565c892655822caa4d36d3f1eb920b2dcb1caa1b9068a7564153d4b64b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6b1c1628825f9e6b61c6429862a7db2698825298e2589e88c96373b3ec62b255\",\"dweb:/ipfs/QmX2sobAuVwaKviRAzxuSfjzM76KTg8hGU8zQhFJubxtrC\"]},\"FARMING/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x854adfa6df542c6522215a7048627f93b34c1c11a35d387b509e4160cb38aa51\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://917672309472a17d792ad1eb14e8e98cfe43cdc38259381080e1a5f396946705\",\"dweb:/ipfs/QmZKDtkKTzi1FYKGsEnCR4kxLssKfE9w1Xxp4e56yNwRp2\"]},\"FARMING/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xebcd7eb909fdb72755f408a0490c3ecc4c3511967eaeda9126a48c8d22882a28\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://99224e5315f91eeac958d966274d2f6cd516ffe7f01717e9bff21c83163142b9\",\"dweb:/ipfs/Qmc8bDabLMznf4YnbCvGxgf7hrQ1aEeNMAf7e78P6AC5gX\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 241,
								"contract": "FARMING/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 244,
								"contract": "FARMING/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 588,
								"contract": "FARMING/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"FARMING/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "FARMING/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"OwnableUpgradeable": [
							130
						]
					},
					"id": 131,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "35:25:0"
						},
						{
							"absolutePath": "FARMING/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 131,
							"sourceUnit": 590,
							"src": "64:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "FARMING/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 131,
							"sourceUnit": 301,
							"src": "107:36:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 5,
										"name": "Initializable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 300,
										"src": "692:13:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Initializable_$300",
											"typeString": "contract Initializable"
										}
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "692:13:0"
								},
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 589,
										"src": "707:18:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_ContextUpgradeable_$589",
											"typeString": "contract ContextUpgradeable"
										}
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "707:18:0"
								}
							],
							"contractDependencies": [
								300,
								589
							],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "145:505:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 130,
							"linearizedBaseContracts": [
								130,
								589,
								300
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 130,
									"src": "733:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "733:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 16,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "791:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "791:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 16,
												"src": "822:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "822:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "790:57:0"
									},
									"src": "764:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "1002:82:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 564,
														"src": "1013:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1013:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1013:26:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 25,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 52,
														"src": "1050:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1050:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "1050:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "856:93:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 20,
											"modifierName": {
												"argumentTypes": null,
												"id": 19,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 283,
												"src": "990:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "990:11:0"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "978:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1002:0:0"
									},
									"scope": 130,
									"src": "955:129:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 51,
										"nodeType": "Block",
										"src": "1149:139:0",
										"statements": [
											{
												"assignments": [
													35
												],
												"declarations": [
													{
														"constant": false,
														"id": 35,
														"mutability": "mutable",
														"name": "msgSender",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 51,
														"src": "1160:17:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 34,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "1160:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 38,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 36,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "1180:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
															"typeString": "function () view returns (address payable)"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1180:12:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1160:32:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 39,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "1203:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 40,
														"name": "msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 35,
														"src": "1212:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1203:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1203:18:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 46,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1266:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1258:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 44,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1258:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1258:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														{
															"argumentTypes": null,
															"id": 48,
															"name": "msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 35,
															"src": "1270:9:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 43,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "1237:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1237:43:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 50,
												"nodeType": "EmitStatement",
												"src": "1232:48:0"
											}
										]
									},
									"documentation": null,
									"id": 52,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 32,
											"modifierName": {
												"argumentTypes": null,
												"id": 31,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 283,
												"src": "1137:11:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1137:11:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1125:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1149:0:0"
									},
									"scope": 130,
									"src": "1092:196:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 60,
										"nodeType": "Block",
										"src": "1424:32:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 58,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1442:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 57,
												"id": 59,
												"nodeType": "Return",
												"src": "1435:13:0"
											}
										]
									},
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "1296:67:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 61,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1383:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 56,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 61,
												"src": "1415:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 55,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1415:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1414:9:0"
									},
									"scope": 130,
									"src": "1369:87:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 74,
										"nodeType": "Block",
										"src": "1570:99:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 65,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 61,
																	"src": "1589:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 66,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1589:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 67,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 573,
																	"src": "1600:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_payable_$",
																		"typeString": "function () view returns (address payable)"
																	}
																},
																"id": 68,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1600:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "1589:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 70,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1614:34:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 64,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1581:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 71,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1581:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 72,
												"nodeType": "ExpressionStatement",
												"src": "1581:68:0"
											},
											{
												"id": 73,
												"nodeType": "PlaceholderStatement",
												"src": "1660:1:0"
											}
										]
									},
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "1464:79:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 75,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1567:2:0"
									},
									"src": "1549:120:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 96,
										"nodeType": "Block",
										"src": "2074:94:0",
										"statements": [
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 82,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "2111:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 85,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2127:1:0",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 84,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2119:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 83,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2119:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": null,
																		"typeString": null
																	}
																}
															},
															"id": 86,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2119:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														],
														"id": 81,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2090:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 87,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2090:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 88,
												"nodeType": "EmitStatement",
												"src": "2085:45:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 89,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2141:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"hexValue": "30",
																"id": 92,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2158:1:0",
																"subdenomination": null,
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2150:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 90,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2150:7:0",
																"typeDescriptions": {
																	"typeIdentifier": null,
																	"typeString": null
																}
															}
														},
														"id": 93,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2150:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "2141:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 95,
												"nodeType": "ExpressionStatement",
												"src": "2141:19:0"
											}
										]
									},
									"documentation": {
										"id": 76,
										"nodeType": "StructuredDocumentation",
										"src": "1677:337:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 97,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 79,
											"modifierName": {
												"argumentTypes": null,
												"id": 78,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "2064:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2064:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2046:2:0"
									},
									"returnParameters": {
										"id": 80,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2074:0:0"
									},
									"scope": 130,
									"src": "2020:148:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2393:174:0",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 111,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 106,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 100,
																"src": "2412:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"hexValue": "30",
																		"id": 109,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2432:1:0",
																		"subdenomination": null,
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 108,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2424:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 107,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2424:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 110,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2424:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "2412:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2436:40:0",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 105,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2404:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2404:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 114,
												"nodeType": "ExpressionStatement",
												"src": "2404:73:0"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 116,
															"name": "_owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 10,
															"src": "2514:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 117,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2522:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 115,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2493:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 118,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2493:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 119,
												"nodeType": "EmitStatement",
												"src": "2488:43:0"
											},
											{
												"expression": {
													"argumentTypes": null,
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 120,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2542:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 121,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 100,
														"src": "2551:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2542:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 123,
												"nodeType": "ExpressionStatement",
												"src": "2542:17:0"
											}
										]
									},
									"documentation": {
										"id": 98,
										"nodeType": "StructuredDocumentation",
										"src": "2176:141:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 103,
											"modifierName": {
												"argumentTypes": null,
												"id": 102,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "2383:9:0",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "2383:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 101,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 100,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 125,
												"src": "2350:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 99,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2350:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2349:18:0"
									},
									"returnParameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2393:0:0"
									},
									"scope": 130,
									"src": "2323:244:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 129,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 130,
									"src": "2573:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 126,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2573:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 128,
										"length": {
											"argumentTypes": null,
											"hexValue": "3439",
											"id": 127,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2581:2:0",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2573:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 131,
							"src": "652:1950:0"
						}
					],
					"src": "35:2567:0"
				},
				"id": 0
			},
			"FARMING/library/WhitelistUpgradeable.sol": {
				"ast": {
					"absolutePath": "FARMING/library/WhitelistUpgradeable.sol",
					"exportedSymbols": {
						"WhitelistUpgradeable": [
							234
						]
					},
					"id": 235,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 132,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "33:25:1"
						},
						{
							"absolutePath": "FARMING/access/OwnableUpgradeable.sol",
							"file": "../access/OwnableUpgradeable.sol",
							"id": 133,
							"nodeType": "ImportDirective",
							"scope": 235,
							"sourceUnit": 131,
							"src": "62:42:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 134,
										"name": "OwnableUpgradeable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 130,
										"src": "141:18:1",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_OwnableUpgradeable_$130",
											"typeString": "contract OwnableUpgradeable"
										}
									},
									"id": 135,
									"nodeType": "InheritanceSpecifier",
									"src": "141:18:1"
								}
							],
							"contractDependencies": [
								130,
								300,
								589
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 234,
							"linearizedBaseContracts": [
								234,
								130,
								589,
								300
							],
							"name": "WhitelistUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 139,
									"mutability": "mutable",
									"name": "_whitelist",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 234,
									"src": "167:44:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 138,
										"keyType": {
											"id": 136,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "176:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "167:25:1",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 137,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "187:4:1",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 141,
									"mutability": "mutable",
									"name": "_disable",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 234,
									"src": "218:21:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 140,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "218:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 147,
									"name": "Whitelisted",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 143,
												"indexed": true,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 147,
												"src": "378:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 142,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "378:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 145,
												"indexed": false,
												"mutability": "mutable",
												"name": "whitelist",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 147,
												"src": "404:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 144,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "404:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "377:42:1"
									},
									"src": "360:60:1"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 149,
									"name": "EnableWhitelist",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "447:2:1"
									},
									"src": "426:24:1"
								},
								{
									"anonymous": false,
									"documentation": null,
									"id": 151,
									"name": "DisableWhitelist",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "478:2:1"
									},
									"src": "456:25:1"
								},
								{
									"body": {
										"id": 164,
										"nodeType": "Block",
										"src": "514:119:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 159,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"id": 154,
																"name": "_disable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "533:8:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"baseExpression": {
																	"argumentTypes": null,
																	"id": 155,
																	"name": "_whitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 139,
																	"src": "545:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 158,
																"indexExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 156,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -15,
																		"src": "556:3:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 157,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "556:10:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address_payable",
																		"typeString": "address payable"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "545:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "533:34:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "57686974656c6973743a2063616c6c6572206973206e6f74206f6e207468652077686974656c697374",
															"id": 160,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "569:43:1",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323",
																"typeString": "literal_string \"Whitelist: caller is not on the whitelist\""
															},
															"value": "Whitelist: caller is not on the whitelist"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_8193a60c6207ee93eb48bebd42af33b356dd6e6ca52ad6aab6a8892e28cd7323",
																"typeString": "literal_string \"Whitelist: caller is not on the whitelist\""
															}
														],
														"id": 153,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "525:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 161,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "525:88:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 162,
												"nodeType": "ExpressionStatement",
												"src": "525:88:1"
											},
											{
												"id": 163,
												"nodeType": "PlaceholderStatement",
												"src": "624:1:1"
											}
										]
									},
									"documentation": null,
									"id": 165,
									"name": "onlyWhitelisted",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 152,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "514:0:1"
									},
									"src": "489:144:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 173,
										"nodeType": "Block",
										"src": "701:35:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 170,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "712:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 171,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "712:16:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 172,
												"nodeType": "ExpressionStatement",
												"src": "712:16:1"
											}
										]
									},
									"documentation": null,
									"id": 174,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 168,
											"modifierName": {
												"argumentTypes": null,
												"id": 167,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 283,
												"src": "689:11:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "689:11:1"
										}
									],
									"name": "__WhitelistUpgradeable_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 166,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "677:2:1"
									},
									"returnParameters": {
										"id": 169,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "701:0:1"
									},
									"scope": 234,
									"src": "641:95:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 185,
										"nodeType": "Block",
										"src": "809:46:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"baseExpression": {
														"argumentTypes": null,
														"id": 181,
														"name": "_whitelist",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 139,
														"src": "827:10:1",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 183,
													"indexExpression": {
														"argumentTypes": null,
														"id": 182,
														"name": "_address",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "838:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "827:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 180,
												"id": 184,
												"nodeType": "Return",
												"src": "820:27:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "c683630d",
									"id": 186,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 186,
												"src": "765:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 175,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "765:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "764:18:1"
									},
									"returnParameters": {
										"id": 180,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 179,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 186,
												"src": "803:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 178,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "803:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "802:6:1"
									},
									"scope": 234,
									"src": "744:111:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 206,
										"nodeType": "Block",
										"src": "932:89:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 199,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"baseExpression": {
															"argumentTypes": null,
															"id": 195,
															"name": "_whitelist",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 139,
															"src": "943:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 197,
														"indexExpression": {
															"argumentTypes": null,
															"id": 196,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 188,
															"src": "954:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "943:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 198,
														"name": "_on",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 190,
														"src": "966:3:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "943:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 200,
												"nodeType": "ExpressionStatement",
												"src": "943:26:1"
											},
											{
												"eventCall": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 202,
															"name": "_address",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 188,
															"src": "999:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 203,
															"name": "_on",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 190,
															"src": "1009:3:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 201,
														"name": "Whitelisted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 147,
														"src": "987:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,bool)"
														}
													},
													"id": 204,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "987:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 205,
												"nodeType": "EmitStatement",
												"src": "982:31:1"
											}
										]
									},
									"documentation": null,
									"functionSelector": "53d6fd59",
									"id": 207,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 193,
											"modifierName": {
												"argumentTypes": null,
												"id": 192,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "922:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "922:9:1"
										}
									],
									"name": "setWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 191,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "_address",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 207,
												"src": "885:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "885:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "_on",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 207,
												"src": "903:8:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 189,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "903:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "884:28:1"
									},
									"returnParameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "932:0:1"
									},
									"scope": 234,
									"src": "863:158:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 228,
										"nodeType": "Block",
										"src": "1088:165:1",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 216,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"argumentTypes": null,
														"id": 214,
														"name": "_disable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "1099:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"argumentTypes": null,
														"id": 215,
														"name": "disable",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 209,
														"src": "1110:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1099:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 217,
												"nodeType": "ExpressionStatement",
												"src": "1099:18:1"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 218,
													"name": "disable",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 209,
													"src": "1132:7:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 226,
													"nodeType": "Block",
													"src": "1197:49:1",
													"statements": [
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 223,
																	"name": "EnableWhitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 149,
																	"src": "1217:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 224,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1217:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 225,
															"nodeType": "EmitStatement",
															"src": "1212:22:1"
														}
													]
												},
												"id": 227,
												"nodeType": "IfStatement",
												"src": "1128:118:1",
												"trueBody": {
													"id": 222,
													"nodeType": "Block",
													"src": "1141:50:1",
													"statements": [
														{
															"eventCall": {
																"argumentTypes": null,
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 219,
																	"name": "DisableWhitelist",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 151,
																	"src": "1161:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
																		"typeString": "function ()"
																	}
																},
																"id": 220,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1161:18:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 221,
															"nodeType": "EmitStatement",
															"src": "1156:23:1"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"functionSelector": "49ba1b49",
									"id": 229,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 212,
											"modifierName": {
												"argumentTypes": null,
												"id": 211,
												"name": "onlyOwner",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 75,
												"src": "1078:9:1",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "1078:9:1"
										}
									],
									"name": "disableWhitelist",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 209,
												"mutability": "mutable",
												"name": "disable",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 229,
												"src": "1055:12:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 208,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1055:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1054:14:1"
									},
									"returnParameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1088:0:1"
									},
									"scope": 234,
									"src": "1029:224:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"constant": false,
									"id": 233,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 234,
									"src": "1261:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 230,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1261:7:1",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 232,
										"length": {
											"argumentTypes": null,
											"hexValue": "3439",
											"id": 231,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1269:2:1",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "1261:11:1",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 235,
							"src": "108:1182:1"
						}
					],
					"src": "33:1257:1"
				},
				"id": 1
			},
			"FARMING/proxy/Initializable.sol": {
				"ast": {
					"absolutePath": "FARMING/proxy/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							300
						]
					},
					"id": 301,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 236,
							"literals": [
								"solidity",
								">=",
								"0.4",
								".24",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "82:32:2"
						},
						{
							"absolutePath": "FARMING/utils/AddressUpgradeable.sol",
							"file": "../utils/AddressUpgradeable.sol",
							"id": 237,
							"nodeType": "ImportDirective",
							"scope": 301,
							"sourceUnit": 545,
							"src": "118:41:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 238,
								"nodeType": "StructuredDocumentation",
								"src": "163:949:2",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity."
							},
							"fullyImplemented": true,
							"id": 300,
							"linearizedBaseContracts": [
								300
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "1155:75:2",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 241,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 300,
									"src": "1236:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 240,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1236:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "1270:93:2",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 244,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 300,
									"src": "1369:26:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 243,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1369:4:2",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"value": null,
									"visibility": "private"
								},
								{
									"body": {
										"id": 282,
										"nodeType": "Block",
										"src": "1528:382:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 254,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 251,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"id": 248,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 244,
																	"src": "1547:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"argumentTypes": null,
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 249,
																		"name": "_isConstructor",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 299,
																		"src": "1564:14:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																			"typeString": "function () view returns (bool)"
																		}
																	},
																	"id": 250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1564:16:2",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "1547:33:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"argumentTypes": null,
																"id": 253,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "1584:13:2",
																"subExpression": {
																	"argumentTypes": null,
																	"id": 252,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 241,
																	"src": "1585:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1547:50:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 255,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1599:48:2",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 247,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "1539:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 256,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1539:109:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 257,
												"nodeType": "ExpressionStatement",
												"src": "1539:109:2"
											},
											{
												"assignments": [
													259
												],
												"declarations": [
													{
														"constant": false,
														"id": 259,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 282,
														"src": "1661:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 258,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1661:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 262,
												"initialValue": {
													"argumentTypes": null,
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1683:14:2",
													"subExpression": {
														"argumentTypes": null,
														"id": 260,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 244,
														"src": "1684:13:2",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1661:36:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 263,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 259,
													"src": "1712:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 273,
												"nodeType": "IfStatement",
												"src": "1708:101:2",
												"trueBody": {
													"id": 272,
													"nodeType": "Block",
													"src": "1728:81:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 266,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 264,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 244,
																	"src": "1743:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 265,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1759:4:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1743:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 267,
															"nodeType": "ExpressionStatement",
															"src": "1743:20:2"
														},
														{
															"expression": {
																"argumentTypes": null,
																"id": 270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 268,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 241,
																	"src": "1778:12:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "74727565",
																	"id": 269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1793:4:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1778:19:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 271,
															"nodeType": "ExpressionStatement",
															"src": "1778:19:2"
														}
													]
												}
											},
											{
												"id": 274,
												"nodeType": "PlaceholderStatement",
												"src": "1821:1:2"
											},
											{
												"condition": {
													"argumentTypes": null,
													"id": 275,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 259,
													"src": "1839:14:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": null,
												"id": 281,
												"nodeType": "IfStatement",
												"src": "1835:68:2",
												"trueBody": {
													"id": 280,
													"nodeType": "Block",
													"src": "1855:48:2",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"argumentTypes": null,
																	"id": 276,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 244,
																	"src": "1870:13:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"argumentTypes": null,
																	"hexValue": "66616c7365",
																	"id": 277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1886:5:2",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "1870:21:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 279,
															"nodeType": "ExpressionStatement",
															"src": "1870:21:2"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 245,
										"nodeType": "StructuredDocumentation",
										"src": "1404:95:2",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 283,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"overrides": null,
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1525:2:2"
									},
									"src": "1505:405:2",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 298,
										"nodeType": "Block",
										"src": "2057:71:2",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 296,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "2075:45:2",
													"subExpression": {
														"argumentTypes": null,
														"arguments": [
															{
																"argumentTypes": null,
																"arguments": [
																	{
																		"argumentTypes": null,
																		"id": 293,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": -28,
																		"src": "2114:4:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_Initializable_$300",
																			"typeString": "contract Initializable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_Initializable_$300",
																			"typeString": "contract Initializable"
																		}
																	],
																	"id": 292,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2106:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 291,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2106:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": null,
																			"typeString": null
																		}
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2106:13:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 289,
																"name": "AddressUpgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 544,
																"src": "2076:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$544_$",
																	"typeString": "type(library AddressUpgradeable)"
																}
															},
															"id": 290,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "isContract",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 320,
															"src": "2076:29:2",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																"typeString": "function (address) view returns (bool)"
															}
														},
														"id": 295,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2076:44:2",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 288,
												"id": 297,
												"nodeType": "Return",
												"src": "2068:52:2"
											}
										]
									},
									"documentation": {
										"id": 284,
										"nodeType": "StructuredDocumentation",
										"src": "1918:79:2",
										"text": "@dev Returns true if and only if the function is running in the constructor"
									},
									"id": 299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isConstructor",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2026:2:2"
									},
									"returnParameters": {
										"id": 288,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 287,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 299,
												"src": "2051:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 286,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2051:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2050:6:2"
									},
									"scope": 300,
									"src": "2003:125:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 301,
							"src": "1114:1017:2"
						}
					],
					"src": "82:2049:2"
				},
				"id": 2
			},
			"FARMING/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "FARMING/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							544
						]
					},
					"id": 545,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 302,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".12"
							],
							"nodeType": "PragmaDirective",
							"src": "35:25:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 303,
								"nodeType": "StructuredDocumentation",
								"src": "64:69:3",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 544,
							"linearizedBaseContracts": [
								544
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 319,
										"nodeType": "Block",
										"src": "822:356:3",
										"statements": [
											{
												"assignments": [
													312
												],
												"declarations": [
													{
														"constant": false,
														"id": 312,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 319,
														"src": "1024:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 311,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1024:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 313,
												"initialValue": null,
												"nodeType": "VariableDeclarationStatement",
												"src": "1024:12:3"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1113:32:3",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1115:28:3",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1135:7:3"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1123:11:3"
																},
																"nodeType": "YulFunctionCall",
																"src": "1123:20:3"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1115:4:3"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 306,
														"isOffset": false,
														"isSlot": false,
														"src": "1135:7:3",
														"valueSize": 1
													},
													{
														"declaration": 312,
														"isOffset": false,
														"isSlot": false,
														"src": "1115:4:3",
														"valueSize": 1
													}
												],
												"id": 314,
												"nodeType": "InlineAssembly",
												"src": "1104:41:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 317,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"argumentTypes": null,
														"id": 315,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 312,
														"src": "1162:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"argumentTypes": null,
														"hexValue": "30",
														"id": 316,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1169:1:3",
														"subdenomination": null,
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1162:8:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 310,
												"id": 318,
												"nodeType": "Return",
												"src": "1155:15:3"
											}
										]
									},
									"documentation": {
										"id": 304,
										"nodeType": "StructuredDocumentation",
										"src": "169:581:3",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 320,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 307,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 306,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 320,
												"src": "776:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 305,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "776:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "775:17:3"
									},
									"returnParameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 320,
												"src": "816:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 308,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "816:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "815:6:3"
									},
									"scope": 544,
									"src": "756:422:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 353,
										"nodeType": "Block",
										"src": "2184:326:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 331,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "2211:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$544",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$544",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2203:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 329,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2203:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 332,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2203:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 333,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "2203:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 334,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "2228:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2203:31:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 336,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2236:31:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 328,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2195:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2195:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 338,
												"nodeType": "ExpressionStatement",
												"src": "2195:73:3"
											},
											{
												"assignments": [
													340,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 340,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 353,
														"src": "2360:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 339,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2360:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													null
												],
												"id": 347,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"hexValue": "",
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2410:2:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 341,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 323,
																"src": "2378:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 342,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "2378:14:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 344,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 343,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 325,
																"src": "2401:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2378:31:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2378:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2359:54:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 349,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 340,
															"src": "2432:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 350,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2441:60:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 348,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "2424:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2424:78:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 352,
												"nodeType": "ExpressionStatement",
												"src": "2424:78:3"
											}
										]
									},
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "1186:921:3",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 354,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 326,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 354,
												"src": "2132:25:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2132:15:3",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 325,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 354,
												"src": "2159:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 324,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2159:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "2131:43:3"
									},
									"returnParameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2184:0:3"
									},
									"scope": 544,
									"src": "2113:397:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 370,
										"nodeType": "Block",
										"src": "3360:84:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 365,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 357,
															"src": "3389:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 366,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 359,
															"src": "3397:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3403:32:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 364,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															371,
															391
														],
														"referencedDeclaration": 391,
														"src": "3376:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3376:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 363,
												"id": 369,
												"nodeType": "Return",
												"src": "3369:67:3"
											}
										]
									},
									"documentation": {
										"id": 355,
										"nodeType": "StructuredDocumentation",
										"src": "2518:747:3",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain`call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 371,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 357,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 371,
												"src": "3293:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 356,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3293:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 371,
												"src": "3309:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 358,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3309:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3292:35:3"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 371,
												"src": "3346:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 361,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3346:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3345:14:3"
									},
									"scope": 544,
									"src": "3271:173:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 390,
										"nodeType": "Block",
										"src": "3791:78:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 384,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 374,
															"src": "3831:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 385,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 376,
															"src": "3839:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "30",
															"id": 386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3845:1:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"argumentTypes": null,
															"id": 387,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 378,
															"src": "3848:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 383,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															411,
															461
														],
														"referencedDeclaration": 461,
														"src": "3809:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3809:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 382,
												"id": 389,
												"nodeType": "Return",
												"src": "3802:59:3"
											}
										]
									},
									"documentation": {
										"id": 372,
										"nodeType": "StructuredDocumentation",
										"src": "3452:216:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 391,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "3696:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 373,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3696:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "3712:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 375,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3712:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 378,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "3731:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 377,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3731:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3695:63:3"
									},
									"returnParameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 391,
												"src": "3777:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 380,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3777:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "3776:14:3"
									},
									"scope": 544,
									"src": "3674:195:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 410,
										"nodeType": "Block",
										"src": "4357:113:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 404,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 394,
															"src": "4397:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 405,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 396,
															"src": "4405:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 406,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 398,
															"src": "4411:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 407,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4418:43:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 403,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															411,
															461
														],
														"referencedDeclaration": 461,
														"src": "4375:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 408,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4375:87:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 402,
												"id": 409,
												"nodeType": "Return",
												"src": "4368:94:3"
											}
										]
									},
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "3877:361:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 411,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 399,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 411,
												"src": "4275:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 396,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 411,
												"src": "4291:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 395,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4291:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 398,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 411,
												"src": "4310:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 397,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4310:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4274:50:3"
									},
									"returnParameters": {
										"id": 402,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 401,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 411,
												"src": "4343:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 400,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4343:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4342:14:3"
									},
									"scope": 544,
									"src": "4244:226:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 460,
										"nodeType": "Block",
										"src": "4867:389:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"argumentTypes": null,
																"expression": {
																	"argumentTypes": null,
																	"arguments": [
																		{
																			"argumentTypes": null,
																			"id": 428,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": -28,
																			"src": "4894:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$544",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$544",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 427,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4886:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 426,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4886:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": null,
																				"typeString": null
																			}
																		}
																	},
																	"id": 429,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4886:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 430,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": null,
																"src": "4886:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"argumentTypes": null,
																"id": 431,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 418,
																"src": "4911:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4886:30:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 433,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4918:40:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 425,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4878:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 434,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4878:81:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 435,
												"nodeType": "ExpressionStatement",
												"src": "4878:81:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 438,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 414,
																	"src": "4989:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 437,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 320,
																"src": "4978:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 439,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4978:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 440,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4998:31:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 436,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "4970:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 441,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4970:60:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 442,
												"nodeType": "ExpressionStatement",
												"src": "4970:60:3"
											},
											{
												"assignments": [
													444,
													446
												],
												"declarations": [
													{
														"constant": false,
														"id": 444,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 460,
														"src": "5104:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 443,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5104:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 446,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 460,
														"src": "5118:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 445,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5118:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 453,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 451,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 416,
															"src": "5173:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"argumentTypes": null,
																"id": 447,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 414,
																"src": "5145:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 448,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"referencedDeclaration": null,
															"src": "5145:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 450,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"argumentTypes": null,
																"id": 449,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 418,
																"src": "5165:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5145:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 452,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5145:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5103:75:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 455,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 444,
															"src": "5214:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 456,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 446,
															"src": "5223:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 457,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 420,
															"src": "5235:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 454,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "5196:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5196:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 424,
												"id": 459,
												"nodeType": "Return",
												"src": "5189:59:3"
											}
										]
									},
									"documentation": {
										"id": 412,
										"nodeType": "StructuredDocumentation",
										"src": "4478:242:3",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 461,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 421,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 461,
												"src": "4757:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 413,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4757:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 461,
												"src": "4773:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 415,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4773:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 418,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 461,
												"src": "4792:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 417,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4792:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 420,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 461,
												"src": "4807:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 419,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4807:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4756:78:3"
									},
									"returnParameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 461,
												"src": "4853:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 422,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4853:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "4852:14:3"
									},
									"scope": 544,
									"src": "4726:530:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 477,
										"nodeType": "Block",
										"src": "5541:99:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 472,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 464,
															"src": "5578:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"argumentTypes": null,
															"id": 473,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 466,
															"src": "5586:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 474,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5592:39:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 471,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															478,
															513
														],
														"referencedDeclaration": 513,
														"src": "5559:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 475,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5559:73:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 470,
												"id": 476,
												"nodeType": "Return",
												"src": "5552:80:3"
											}
										]
									},
									"documentation": {
										"id": 462,
										"nodeType": "StructuredDocumentation",
										"src": "5264:171:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 478,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 467,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 478,
												"src": "5469:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5469:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 466,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 478,
												"src": "5485:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 465,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5485:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5468:35:3"
									},
									"returnParameters": {
										"id": 470,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 478,
												"src": "5527:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 468,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5527:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5526:14:3"
									},
									"scope": 544,
									"src": "5441:199:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 512,
										"nodeType": "Block",
										"src": "5960:294:3",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"arguments": [
																{
																	"argumentTypes": null,
																	"id": 492,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 481,
																	"src": "5990:6:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 491,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 320,
																"src": "5979:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 493,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5979:18:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 494,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5999:38:3",
															"subdenomination": null,
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 490,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															-18,
															-18
														],
														"referencedDeclaration": -18,
														"src": "5971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 495,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5971:67:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 496,
												"nodeType": "ExpressionStatement",
												"src": "5971:67:3"
											},
											{
												"assignments": [
													498,
													500
												],
												"declarations": [
													{
														"constant": false,
														"id": 498,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 512,
														"src": "6112:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 497,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6112:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"value": null,
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 500,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"overrides": null,
														"scope": 512,
														"src": "6126:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 499,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6126:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"value": null,
														"visibility": "internal"
													}
												],
												"id": 505,
												"initialValue": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 503,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "6171:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": null,
															"id": 501,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 481,
															"src": "6153:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 502,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": null,
														"src": "6153:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 504,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6153:23:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6111:65:3"
											},
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [
														{
															"argumentTypes": null,
															"id": 507,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 498,
															"src": "6212:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"argumentTypes": null,
															"id": 508,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 500,
															"src": "6221:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"argumentTypes": null,
															"id": 509,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 485,
															"src": "6233:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 506,
														"name": "_verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 543,
														"src": "6194:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 510,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6194:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 489,
												"id": 511,
												"nodeType": "Return",
												"src": "6187:59:3"
											}
										]
									},
									"documentation": {
										"id": 479,
										"nodeType": "StructuredDocumentation",
										"src": "5648:178:3",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 513,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 513,
												"src": "5860:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 480,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5860:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 483,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 513,
												"src": "5876:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 482,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5876:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 485,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 513,
												"src": "5895:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 484,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5895:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5859:63:3"
									},
									"returnParameters": {
										"id": 489,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 513,
												"src": "5946:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 487,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5946:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "5945:14:3"
									},
									"scope": 544,
									"src": "5832:422:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 542,
										"nodeType": "Block",
										"src": "6391:613:3",
										"statements": [
											{
												"condition": {
													"argumentTypes": null,
													"id": 524,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 515,
													"src": "6406:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 540,
													"nodeType": "Block",
													"src": "6465:532:3",
													"statements": [
														{
															"condition": {
																"argumentTypes": null,
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 531,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"argumentTypes": null,
																	"expression": {
																		"argumentTypes": null,
																		"id": 528,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 517,
																		"src": "6551:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 529,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": null,
																	"src": "6551:17:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"argumentTypes": null,
																	"hexValue": "30",
																	"id": 530,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6571:1:3",
																	"subdenomination": null,
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6551:21:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 538,
																"nodeType": "Block",
																"src": "6931:55:3",
																"statements": [
																	{
																		"expression": {
																			"argumentTypes": null,
																			"arguments": [
																				{
																					"argumentTypes": null,
																					"id": 535,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 519,
																					"src": "6957:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 534,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					-19,
																					-19
																				],
																				"referencedDeclaration": -19,
																				"src": "6950:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 536,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6950:20:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 537,
																		"nodeType": "ExpressionStatement",
																		"src": "6950:20:3"
																	}
																]
															},
															"id": 539,
															"nodeType": "IfStatement",
															"src": "6547:439:3",
															"trueBody": {
																"id": 533,
																"nodeType": "Block",
																"src": "6574:351:3",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6762:148:3",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6785:40:3",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6814:10:3"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6808:5:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6808:17:3"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6789:15:3",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6858:2:3",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6862:10:3"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6854:3:3"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6854:19:3"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6875:15:3"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6847:6:3"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6847:44:3"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6847:44:3"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 517,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6814:10:3",
																				"valueSize": 1
																			},
																			{
																				"declaration": 517,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6862:10:3",
																				"valueSize": 1
																			}
																		],
																		"id": 532,
																		"nodeType": "InlineAssembly",
																		"src": "6753:157:3"
																	}
																]
															}
														}
													]
												},
												"id": 541,
												"nodeType": "IfStatement",
												"src": "6402:595:3",
												"trueBody": {
													"id": 527,
													"nodeType": "Block",
													"src": "6415:44:3",
													"statements": [
														{
															"expression": {
																"argumentTypes": null,
																"id": 525,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 517,
																"src": "6437:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 523,
															"id": 526,
															"nodeType": "Return",
															"src": "6430:17:3"
														}
													]
												}
											}
										]
									},
									"documentation": null,
									"id": 543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_verifyCallResult",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 543,
												"src": "6289:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 514,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6289:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 517,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 543,
												"src": "6303:23:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 516,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6303:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 543,
												"src": "6328:26:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 518,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6328:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6288:67:3"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 543,
												"src": "6377:12:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 521,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6377:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "6376:14:3"
									},
									"scope": 544,
									"src": "6262:742:3",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 545,
							"src": "135:6872:3"
						}
					],
					"src": "35:6972:3"
				},
				"id": 3
			},
			"FARMING/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "FARMING/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							589
						]
					},
					"id": 590,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 546,
							"literals": [
								"solidity",
								">=",
								"0.6",
								".0",
								"<",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:31:4"
						},
						{
							"absolutePath": "FARMING/proxy/Initializable.sol",
							"file": "../proxy/Initializable.sol",
							"id": 547,
							"nodeType": "ImportDirective",
							"scope": 590,
							"sourceUnit": 301,
							"src": "68:36:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"arguments": null,
									"baseName": {
										"contractScope": null,
										"id": 548,
										"name": "Initializable",
										"nodeType": "UserDefinedTypeName",
										"referencedDeclaration": 300,
										"src": "658:13:4",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_Initializable_$300",
											"typeString": "contract Initializable"
										}
									},
									"id": 549,
									"nodeType": "InheritanceSpecifier",
									"src": "658:13:4"
								}
							],
							"contractDependencies": [
								300
							],
							"contractKind": "contract",
							"documentation": null,
							"fullyImplemented": true,
							"id": 589,
							"linearizedBaseContracts": [
								589,
								300
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 557,
										"nodeType": "Block",
										"src": "726:45:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 554,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 564,
														"src": "737:24:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 555,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "737:26:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 556,
												"nodeType": "ExpressionStatement",
												"src": "737:26:4"
											}
										]
									},
									"documentation": null,
									"id": 558,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 552,
											"modifierName": {
												"argumentTypes": null,
												"id": 551,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 283,
												"src": "714:11:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "714:11:4"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 550,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "702:2:4"
									},
									"returnParameters": {
										"id": 553,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "726:0:4"
									},
									"scope": 589,
									"src": "679:92:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 563,
										"nodeType": "Block",
										"src": "836:8:4",
										"statements": []
									},
									"documentation": null,
									"id": 564,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"arguments": null,
											"id": 561,
											"modifierName": {
												"argumentTypes": null,
												"id": 560,
												"name": "initializer",
												"nodeType": "Identifier",
												"overloadedDeclarations": [],
												"referencedDeclaration": 283,
												"src": "824:11:4",
												"typeDescriptions": {
													"typeIdentifier": "t_modifier$__$",
													"typeString": "modifier ()"
												}
											},
											"nodeType": "ModifierInvocation",
											"src": "824:11:4"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "812:2:4"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "836:0:4"
									},
									"scope": 589,
									"src": "779:65:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 572,
										"nodeType": "Block",
										"src": "920:36:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 569,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "938:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 570,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "938:10:4",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"functionReturnParameters": 568,
												"id": 571,
												"nodeType": "Return",
												"src": "931:17:4"
											}
										]
									},
									"documentation": null,
									"id": 573,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 565,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "869:2:4"
									},
									"returnParameters": {
										"id": 568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 567,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 573,
												"src": "903:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 566,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "903:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "902:17:4"
									},
									"scope": 589,
									"src": "850:106:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 583,
										"nodeType": "Block",
										"src": "1029:168:4",
										"statements": [
											{
												"expression": {
													"argumentTypes": null,
													"id": 578,
													"name": "this",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": -28,
													"src": "1040:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_ContextUpgradeable_$589",
														"typeString": "contract ContextUpgradeable"
													}
												},
												"id": 579,
												"nodeType": "ExpressionStatement",
												"src": "1040:4:4"
											},
											{
												"expression": {
													"argumentTypes": null,
													"expression": {
														"argumentTypes": null,
														"id": 580,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": -15,
														"src": "1181:3:4",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 581,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"referencedDeclaration": null,
													"src": "1181:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 577,
												"id": 582,
												"nodeType": "Return",
												"src": "1174:15:4"
											}
										]
									},
									"documentation": null,
									"id": 584,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"overrides": null,
									"parameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "981:2:4"
									},
									"returnParameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 576,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"overrides": null,
												"scope": 584,
												"src": "1015:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 575,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1015:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"value": null,
												"visibility": "internal"
											}
										],
										"src": "1014:14:4"
									},
									"scope": 589,
									"src": "964:233:4",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 588,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"overrides": null,
									"scope": 589,
									"src": "1203:25:4",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 585,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1203:7:4",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 587,
										"length": {
											"argumentTypes": null,
											"hexValue": "3530",
											"id": 586,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1211:2:4",
											"subdenomination": null,
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1203:11:4",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"value": null,
									"visibility": "private"
								}
							],
							"scope": 590,
							"src": "618:614:4"
						}
					],
					"src": "35:1197:4"
				},
				"id": 4
			}
		}
	}
}